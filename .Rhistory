a <- available.packages()
head(rownames(a), 3)
head(rownames(a), slidify)
install.packages("KernSmooth")
library(KernSmooth)
install.packages("swirl")
library("swirl")
swirl()
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
z, 555, z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
swirl()
library("swirl")
ls()
rm(list=ls())
swirl()
bye()
swirl()
bye()
getwd()
swirl
swirl()
5 + 7
bye()
swirl()
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
my_seq
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
x <- 5 + 7
x
y <- x -3
y
c(1.1, 9, 3.13)
c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- z-1
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
vector()
x<-##comments
bye()
9:29
swirl()
library("swirl")
ls()
rm(list=ls())
swirl()
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = "")
paste(my_char, collapse = " ")
my_name <- c(my_char, "Tinghui")
my_name
paste(my_name, collapse=" ")
paste("Hello", "World!", sep=" ")
paste("Hello", "world!", sep =" ")
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
add2 <- function(x, y){
x + y
}
add2(5, 9)
above10 <- function(x){
use <- x > 10
x[use]
}
above <- function(x, n){
use <- x > n
x[use]
}
x <- 1: 20
above(x, 12)
above10(x)
above <- function(x, n = 10){
use <- x > n
x[use]
}
above(x)
columnmean <- function(y){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc)
{
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE){
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc)
{
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
?mean
library("swirl")
swirl()
formals(columnmena)
formals(columnmea)
formals(columnmean)
mydata <- rnorm(100)
sd(mydata)
?rnorm
?lm
?plotting
args(paste)
?paste
args(cat)
?cat
debug
library("swirl")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
viewinfo()
?str
?summary
?head
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags/landmass)
table(flags$landmass)
?table
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
iris
iris$species
iris$Species
iris[iris$Species = "virginica"]
class(iris)
vir <- subset(iris, Species = "virginica", select c(Sepal.Length) )
subset(iris, Species = "virginica")
subset(iris, Species == "virginica")
subset(iris, Species == "virginica", select "Sepal.Length")
subset(iris, Species == "virginica", select c("Sepal.Length")
subset(iris, Species == "virginica", select c(Sepal.Length))
subset(iris$Sepal.Length, Species == "virginica")
subset(iris, Species == "virginica", select = c(Sepal.Length))
mean(subset(iris, Species == "virginica", select = c(Sepal.Length)))
vir <- subset(iris, Species == "virginica", select = c(Sepal.Length))
mean(vir)
mean(unlist(vir))
rowMeans(iris[, 1:4])
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
?apply
library(datasets)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
debug(ls)
ls
debug(ls)
ls
install.packages("sqldf")
library(sqldf)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
download.file(url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", destfile="fss.csv", method="curl")
acs <- read.csv("fss.csv")
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select * from acs where AGEP < 50")
unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
version
?version
a <- 1 + 1
a = b
a = 2
setwd("~/Documents/Online Course/Reproducible Research/project/1/RepData_PeerAssessment1")
rawData <- read.csv("activity.csv")
str(rawData)
summary(rawData)
View(rawData)
?as.date
?as.Date
rawData$date <- as.Date(rawData$date, format = "%Y-%m-%d")
str(rawData)
?unique
NoOfDays <- unique(rawData$date)
NoOfDays
?count
?Count
str(NoOfDays)
length
NoOfDays <- length(unique(rawData$date))
NoOfDays
TotalSteps <- sum(rawData$steps)
TotalSteps
?sum
TotalSteps <- sum(rawData$steps, na.rm = FALSE)
NoOfDays <- length(unique(rawData$date))
TotalSteps
TotalSteps <- sum(rawData$steps, na.rm = TRUE)
TotalSteps
NoOfDays
hist(rawData$steps)
StepsByDay <- aggregate(rawData$steps,
by = list(date = rawData$date),
FUN = sum,
na.rm = TRUE)
StepsByDay
?aggregate
StepsByDay <- aggregate(totalSteps = rawData$steps,
by = list(date = rawData$date),
FUN = sum,
na.rm = TRUE)
names(StepsByDay) <- c("Date", "TotalSteps")
StepsByDay
hist(StepsByDay$TotalSteps)
?hist
xlab = "Number of Steps")
hist(StepsByDay$TotalSteps,
main = "Histogram of steps taken per day",
xlab = "Number of Steps")
?hist
hist(StepsByDay$TotalSteps,
breaks = 10,
main = "Histogram of steps taken per day",
xlab = "Number of Steps")
hist(StepsByDay$TotalSteps,
breaks = 20,
main = "Histogram of steps taken per day",
xlab = "Number of Steps")
hist(StepsByDay$TotalSteps,
breaks = 10,
main = "Histogram of steps taken per day",
xlab = "Number of Steps")
hist(StepsByDay$TotalSteps,
breaks = 20,
main = "Histogram of steps taken per day",
xlab = "Number of Steps")
We can see that the range between 10K-11K and below 1K are most frequent.
max(StepsByDay$TotalSteps)
TotalSteps <- sum(StepsByDay$TotalSteps,
na.rm = TRUE)
NoOfDays <- length(unique(StepsByDay$Date))
TotalSteps
NoOfDays
?mean
DayStepsMean <- mean(StepsByDay$TotalSteps)
DayStepsMean
TotalSteps/61
?median
DayStepsMedian <- median(StepsByDay$TotalSteps)
DayStepsMedian
median(StepsByDay$TotalSteps)
?plot
plot(rawData$interval, rawData$steps, type = "l")
?tapply
StepsByInterval <- aggregate(rawData$steps,
by = list(Interval = rawData$interval),
FUN = sum,
na.rm = TRUE)
StepsByInterval
StepsByInterval <- aggregate(rawData$steps,
by = list(Interval = rawData$interval),
FUN = mean,
na.rm = TRUE)
StepsByInterval
names(StepsByInterval) <- c("Interval", "AverageSteps")
plot(StepsByInterval$Interval, StepsByInterval$AverageSteps, type = "l")
?ggplot
?plot
StepsByInterval
abline(h=max(StepsByInterval$AverageSteps))
?abline
abline(v=max(StepsByInterval$AverageSteps))
plot(StepsByInterval$Interval,
StepsByInterval$AverageSteps,
type = "l",
xlab = "Interval",
ylab = "Average Number of Steps",
main = "Average Number of Steps by Interval")
abline(v=max(StepsByInterval$AverageSteps))
max(StepsByInterval$AverageSteps)
Interval))
with(StepsByInterval,
AverageSteps = max(StepsByInterval$AverageSteps),
Interval)
max(StepsByInterval$AverageSteps)
StepsByInterval$Interval[835]
?subset
IntervalWithMaxStep <- subset(StepsByInterval,
AverageSteps = max(StepsByInterval$AverageSteps))
IntervalWithMaxStep
IntervalWithMaxStep <- subset(StepsByInterval,
AverageSteps = max(AverageSteps))
IntervalWithMaxStep
IntervalWithMaxStep <- StepsByInterval[ StepsByInterval$AverageSteps == max( StepsByInterval$AverageSteps) , ]
IntervalWithMaxStep
IntervalWithMaxStep <- StepsByInterval[StepsByInterval$AverageSteps == max( StepsByInterval$AverageSteps), Interval]
IntervalWithMaxStep <- StepsByInterval[StepsByInterval$AverageSteps == max( StepsByInterval$AverageSteps), 1]
IntervalWithMaxStep
plot(StepsByInterval$Interval,
StepsByInterval$AverageSteps,
type = "l",
xlab = "Interval",
ylab = "Average Number of Steps",
main = "Average Number of Steps by Interval")
IntervalWithMaxStep <- StepsByInterval[StepsByInterval$AverageSteps == max( StepsByInterval$AverageSteps), 1]
abline(v = IntervalWithMaxStep)
?abline
abline(v = IntervalWithMaxStep, col = "green")
